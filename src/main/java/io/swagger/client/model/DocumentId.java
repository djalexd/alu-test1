/*
 * Gecad ePayment API
 * Move your app forward with the Uber API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * DocumentId
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-10-20T17:53:39.583+02:00")
public class DocumentId {
  /**
   * Shopper's ID type - mandatory for UPT.  Accepted values:  * PERSONALID (identity card) * PASSPORT (passport) * DRVLICENSE (driving license) 
   */
  public enum DocumentTypeEnum {
    @SerializedName("PERSONALID")
    PERSONALID("PERSONALID"),
    
    @SerializedName("PASSPORT")
    PASSPORT("PASSPORT"),
    
    @SerializedName("DRVLICENSE")
    DRVLICENSE("DRVLICENSE");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("documentType")
  private DocumentTypeEnum documentType = null;

  @SerializedName("documentNumber")
  private String documentNumber = null;

  public DocumentId documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * Shopper's ID type - mandatory for UPT.  Accepted values:  * PERSONALID (identity card) * PASSPORT (passport) * DRVLICENSE (driving license) 
   * @return documentType
  **/
  @ApiModelProperty(example = "null", value = "Shopper's ID type - mandatory for UPT.  Accepted values:  * PERSONALID (identity card) * PASSPORT (passport) * DRVLICENSE (driving license) ")
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }

  public DocumentId documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * Shopper's ID number (for the specified ID type)   
   * @return documentNumber
  **/
  @ApiModelProperty(example = "null", value = "Shopper's ID number (for the specified ID type)   ")
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentId documentId = (DocumentId) o;
    return Objects.equals(this.documentType, documentId.documentType) &&
        Objects.equals(this.documentNumber, documentId.documentNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, documentNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentId {\n");
    
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

