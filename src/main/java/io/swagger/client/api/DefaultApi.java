/**
 * Gecad ePayment API
 * Move your app forward with the Uber API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.time.OffsetDateTime;
import io.swagger.client.model.Error;
import io.swagger.client.model.AluResponseRaw;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createOrder */
    private com.squareup.okhttp.Call createOrderCall(String MERCHANT, String ORDER_REF, OffsetDateTime ORDER_DATE, String PAY_METHOD, String BACK_REF, String ORDER_HASH, String BILL_LNAME, String BILL_FNAME, String BILL_EMAIL, String BILL_PHONE, String BILL_COUNTRYCODE, String BILL_CITYPE, String BILL_CINUMBER, String CC_NUMBER, String EXP_MONTH, String EXP_YEAR, String CC_CVV, String CC_OWNER, String CC_TOKEN, String oRDERPINFO0, String oRDERVER0, BigDecimal SELECTED_INSTALLMENTS_NUMBER, String CARD_PROGRAM_NAME, String ORDER_TIMEOUT, String USE_LOYALTY_POINTS, String LOYALTY_POINTS_AMOUNT, String CAMPAIGN_TYPE, String ORDER_SHIPPING, String POS_CODE, String BILL_FAX, String BILL_ADDRESS, String bILLADDRESS2, String BILL_ZIPCODE, String BILL_CITY, String BILL_STATE, String DELIVERY_LNAME, String DELIVERY_FNAME, String DELIVERY_EMAIL, String DELIVERY_PHONE, String DELIVERY_COMPANY, String DELIVERY_ADDRESS, String dELIVERYADDRESS2, String DELIVERY_ZIPCODE, String DELIVERY_CITY, String DELIVERY_STATE, String DELIVERY_COUNTRYCODE, String LU_ENABLE_TOKEN, String LU_TOKEN_TYPE, String CC_NUMBER_TIME, String CC_OWNER_TIME, String CLIENT_IP, String CLIENT_TIME, String oRDERPNAME0, String oRDERPCODE0, BigDecimal oRDERPRICE0, BigDecimal oRDERVAT0, String oRDERPRICETYPE0, Integer oRDERQTY0, String PRICES_CURRENCY, String oRDERPNAME1, String oRDERPCODE1, BigDecimal oRDERPRICE1, BigDecimal oRDERVAT1, String oRDERPRICETYPE1, Integer oRDERQTY1, String oRDERPNAME2, String oRDERPCODE2, BigDecimal oRDERPRICE2, BigDecimal oRDERVAT2, String oRDERPRICETYPE2, Integer oRDERQTY2, String oRDERPNAME3, String oRDERPCODE3, BigDecimal oRDERPRICE3, BigDecimal oRDERVAT3, String oRDERPRICETYPE3, Integer oRDERQTY3, String oRDERPNAME4, String oRDERPCODE4, BigDecimal oRDERPRICE4, BigDecimal oRDERVAT4, String oRDERPRICETYPE4, Integer oRDERQTY4, String oRDERPNAME5, String oRDERPCODE5, BigDecimal oRDERPRICE5, BigDecimal oRDERVAT5, String oRDERPRICETYPE5, Integer oRDERQTY5, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'MERCHANT' is set
        if (MERCHANT == null) {
            throw new ApiException("Missing the required parameter 'MERCHANT' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'ORDER_REF' is set
        if (ORDER_REF == null) {
            throw new ApiException("Missing the required parameter 'ORDER_REF' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'ORDER_DATE' is set
        if (ORDER_DATE == null) {
            throw new ApiException("Missing the required parameter 'ORDER_DATE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_LNAME' is set
        if (BILL_LNAME == null) {
            throw new ApiException("Missing the required parameter 'BILL_LNAME' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_FNAME' is set
        if (BILL_FNAME == null) {
            throw new ApiException("Missing the required parameter 'BILL_FNAME' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_EMAIL' is set
        if (BILL_EMAIL == null) {
            throw new ApiException("Missing the required parameter 'BILL_EMAIL' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_PHONE' is set
        if (BILL_PHONE == null) {
            throw new ApiException("Missing the required parameter 'BILL_PHONE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_COUNTRYCODE' is set
        if (BILL_COUNTRYCODE == null) {
            throw new ApiException("Missing the required parameter 'BILL_COUNTRYCODE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_CITYPE' is set
        if (BILL_CITYPE == null) {
            throw new ApiException("Missing the required parameter 'BILL_CITYPE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_CINUMBER' is set
        if (BILL_CINUMBER == null) {
            throw new ApiException("Missing the required parameter 'BILL_CINUMBER' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_ADDRESS' is set
        if (BILL_ADDRESS == null) {
            throw new ApiException("Missing the required parameter 'BILL_ADDRESS' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_ZIPCODE' is set
        if (BILL_ZIPCODE == null) {
            throw new ApiException("Missing the required parameter 'BILL_ZIPCODE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'BILL_CITY' is set
        if (BILL_CITY == null) {
            throw new ApiException("Missing the required parameter 'BILL_CITY' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_LNAME' is set
        if (DELIVERY_LNAME == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_LNAME' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_FNAME' is set
        if (DELIVERY_FNAME == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_FNAME' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_PHONE' is set
        if (DELIVERY_PHONE == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_PHONE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_ADDRESS' is set
        if (DELIVERY_ADDRESS == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_ADDRESS' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_ZIPCODE' is set
        if (DELIVERY_ZIPCODE == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_ZIPCODE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_CITY' is set
        if (DELIVERY_CITY == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_CITY' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_STATE' is set
        if (DELIVERY_STATE == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_STATE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'DELIVERY_COUNTRYCODE' is set
        if (DELIVERY_COUNTRYCODE == null) {
            throw new ApiException("Missing the required parameter 'DELIVERY_COUNTRYCODE' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'oRDERPNAME0' is set
        if (oRDERPNAME0 == null) {
            throw new ApiException("Missing the required parameter 'oRDERPNAME0' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'oRDERPCODE0' is set
        if (oRDERPCODE0 == null) {
            throw new ApiException("Missing the required parameter 'oRDERPCODE0' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'oRDERPRICE0' is set
        if (oRDERPRICE0 == null) {
            throw new ApiException("Missing the required parameter 'oRDERPRICE0' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'oRDERQTY0' is set
        if (oRDERQTY0 == null) {
            throw new ApiException("Missing the required parameter 'oRDERQTY0' when calling createOrder(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/alu/v3".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (MERCHANT != null)
        localVarFormParams.put("MERCHANT", MERCHANT);
        if (ORDER_REF != null)
        localVarFormParams.put("ORDER_REF", ORDER_REF);
        if (ORDER_DATE != null)
        localVarFormParams.put("ORDER_DATE", ORDER_DATE);
        if (PAY_METHOD != null)
        localVarFormParams.put("PAY_METHOD", PAY_METHOD);
        if (BACK_REF != null)
        localVarFormParams.put("BACK_REF", BACK_REF);
        if (ORDER_HASH != null)
        localVarFormParams.put("ORDER_HASH", ORDER_HASH);
        if (BILL_LNAME != null)
        localVarFormParams.put("BILL_LNAME", BILL_LNAME);
        if (BILL_FNAME != null)
        localVarFormParams.put("BILL_FNAME", BILL_FNAME);
        if (BILL_EMAIL != null)
        localVarFormParams.put("BILL_EMAIL", BILL_EMAIL);
        if (BILL_PHONE != null)
        localVarFormParams.put("BILL_PHONE", BILL_PHONE);
        if (BILL_COUNTRYCODE != null)
        localVarFormParams.put("BILL_COUNTRYCODE", BILL_COUNTRYCODE);
        if (BILL_CITYPE != null)
        localVarFormParams.put("BILL_CITYPE", BILL_CITYPE);
        if (BILL_CINUMBER != null)
        localVarFormParams.put("BILL_CINUMBER", BILL_CINUMBER);
        if (CC_NUMBER != null)
        localVarFormParams.put("CC_NUMBER", CC_NUMBER);
        if (EXP_MONTH != null)
        localVarFormParams.put("EXP_MONTH", EXP_MONTH);
        if (EXP_YEAR != null)
        localVarFormParams.put("EXP_YEAR", EXP_YEAR);
        if (CC_CVV != null)
        localVarFormParams.put("CC_CVV", CC_CVV);
        if (CC_OWNER != null)
        localVarFormParams.put("CC_OWNER", CC_OWNER);
        if (CC_TOKEN != null)
        localVarFormParams.put("CC_TOKEN", CC_TOKEN);
        if (oRDERPINFO0 != null)
        localVarFormParams.put("ORDER_PINFO[0]", oRDERPINFO0);
        if (oRDERVER0 != null)
        localVarFormParams.put("ORDER_VER[0]", oRDERVER0);
        if (SELECTED_INSTALLMENTS_NUMBER != null)
        localVarFormParams.put("SELECTED_INSTALLMENTS_NUMBER", SELECTED_INSTALLMENTS_NUMBER);
        if (CARD_PROGRAM_NAME != null)
        localVarFormParams.put("CARD_PROGRAM_NAME", CARD_PROGRAM_NAME);
        if (ORDER_TIMEOUT != null)
        localVarFormParams.put("ORDER_TIMEOUT", ORDER_TIMEOUT);
        if (USE_LOYALTY_POINTS != null)
        localVarFormParams.put("USE_LOYALTY_POINTS", USE_LOYALTY_POINTS);
        if (LOYALTY_POINTS_AMOUNT != null)
        localVarFormParams.put("LOYALTY_POINTS_AMOUNT", LOYALTY_POINTS_AMOUNT);
        if (CAMPAIGN_TYPE != null)
        localVarFormParams.put("CAMPAIGN_TYPE", CAMPAIGN_TYPE);
        if (ORDER_SHIPPING != null)
        localVarFormParams.put("ORDER_SHIPPING", ORDER_SHIPPING);
        if (POS_CODE != null)
        localVarFormParams.put("POS_CODE", POS_CODE);
        if (BILL_FAX != null)
        localVarFormParams.put("BILL_FAX", BILL_FAX);
        if (BILL_ADDRESS != null)
        localVarFormParams.put("BILL_ADDRESS", BILL_ADDRESS);
        if (bILLADDRESS2 != null)
        localVarFormParams.put("BILL_ADDRESS2", bILLADDRESS2);
        if (BILL_ZIPCODE != null)
        localVarFormParams.put("BILL_ZIPCODE", BILL_ZIPCODE);
        if (BILL_CITY != null)
        localVarFormParams.put("BILL_CITY", BILL_CITY);
        if (BILL_STATE != null)
        localVarFormParams.put("BILL_STATE", BILL_STATE);
        if (DELIVERY_LNAME != null)
        localVarFormParams.put("DELIVERY_LNAME", DELIVERY_LNAME);
        if (DELIVERY_FNAME != null)
        localVarFormParams.put("DELIVERY_FNAME", DELIVERY_FNAME);
        if (DELIVERY_EMAIL != null)
        localVarFormParams.put("DELIVERY_EMAIL", DELIVERY_EMAIL);
        if (DELIVERY_PHONE != null)
        localVarFormParams.put("DELIVERY_PHONE", DELIVERY_PHONE);
        if (DELIVERY_COMPANY != null)
        localVarFormParams.put("DELIVERY_COMPANY", DELIVERY_COMPANY);
        if (DELIVERY_ADDRESS != null)
        localVarFormParams.put("DELIVERY_ADDRESS", DELIVERY_ADDRESS);
        if (dELIVERYADDRESS2 != null)
        localVarFormParams.put("DELIVERY_ADDRESS2", dELIVERYADDRESS2);
        if (DELIVERY_ZIPCODE != null)
        localVarFormParams.put("DELIVERY_ZIPCODE", DELIVERY_ZIPCODE);
        if (DELIVERY_CITY != null)
        localVarFormParams.put("DELIVERY_CITY", DELIVERY_CITY);
        if (DELIVERY_STATE != null)
        localVarFormParams.put("DELIVERY_STATE", DELIVERY_STATE);
        if (DELIVERY_COUNTRYCODE != null)
        localVarFormParams.put("DELIVERY_COUNTRYCODE", DELIVERY_COUNTRYCODE);
        if (LU_ENABLE_TOKEN != null)
        localVarFormParams.put("LU_ENABLE_TOKEN", LU_ENABLE_TOKEN);
        if (LU_TOKEN_TYPE != null)
        localVarFormParams.put("LU_TOKEN_TYPE", LU_TOKEN_TYPE);
        if (CC_NUMBER_TIME != null)
        localVarFormParams.put("CC_NUMBER_TIME", CC_NUMBER_TIME);
        if (CC_OWNER_TIME != null)
        localVarFormParams.put("CC_OWNER_TIME", CC_OWNER_TIME);
        if (CLIENT_IP != null)
        localVarFormParams.put("CLIENT_IP", CLIENT_IP);
        if (CLIENT_TIME != null)
        localVarFormParams.put("CLIENT_TIME", CLIENT_TIME);
        if (oRDERPNAME0 != null)
        localVarFormParams.put("ORDER_PNAME[0]", oRDERPNAME0);
        if (oRDERPCODE0 != null)
        localVarFormParams.put("ORDER_PCODE[0]", oRDERPCODE0);
        if (oRDERPRICE0 != null)
        localVarFormParams.put("ORDER_PRICE[0]", oRDERPRICE0);
        if (oRDERVAT0 != null)
        localVarFormParams.put("ORDER_VAT[0]", oRDERVAT0);
        if (oRDERPRICETYPE0 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[0]", oRDERPRICETYPE0);
        if (oRDERQTY0 != null)
        localVarFormParams.put("ORDER_QTY[0]", oRDERQTY0);
        if (PRICES_CURRENCY != null)
        localVarFormParams.put("PRICES_CURRENCY", PRICES_CURRENCY);
        if (oRDERPNAME1 != null)
        localVarFormParams.put("ORDER_PNAME[1]", oRDERPNAME1);
        if (oRDERPCODE1 != null)
        localVarFormParams.put("ORDER_PCODE[1]", oRDERPCODE1);
        if (oRDERPRICE1 != null)
        localVarFormParams.put("ORDER_PRICE[1]", oRDERPRICE1);
        if (oRDERVAT1 != null)
        localVarFormParams.put("ORDER_VAT[1]", oRDERVAT1);
        if (oRDERPRICETYPE1 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[1]", oRDERPRICETYPE1);
        if (oRDERQTY1 != null)
        localVarFormParams.put("ORDER_QTY[1]", oRDERQTY1);
        if (oRDERPNAME2 != null)
        localVarFormParams.put("ORDER_PNAME[2]", oRDERPNAME2);
        if (oRDERPCODE2 != null)
        localVarFormParams.put("ORDER_PCODE[2]", oRDERPCODE2);
        if (oRDERPRICE2 != null)
        localVarFormParams.put("ORDER_PRICE[2]", oRDERPRICE2);
        if (oRDERVAT2 != null)
        localVarFormParams.put("ORDER_VAT[2]", oRDERVAT2);
        if (oRDERPRICETYPE2 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[2]", oRDERPRICETYPE2);
        if (oRDERQTY2 != null)
        localVarFormParams.put("ORDER_QTY[2]", oRDERQTY2);
        if (oRDERPNAME3 != null)
        localVarFormParams.put("ORDER_PNAME[3]", oRDERPNAME3);
        if (oRDERPCODE3 != null)
        localVarFormParams.put("ORDER_PCODE[3]", oRDERPCODE3);
        if (oRDERPRICE3 != null)
        localVarFormParams.put("ORDER_PRICE[3]", oRDERPRICE3);
        if (oRDERVAT3 != null)
        localVarFormParams.put("ORDER_VAT[3]", oRDERVAT3);
        if (oRDERPRICETYPE3 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[3]", oRDERPRICETYPE3);
        if (oRDERQTY3 != null)
        localVarFormParams.put("ORDER_QTY[3]", oRDERQTY3);
        if (oRDERPNAME4 != null)
        localVarFormParams.put("ORDER_PNAME[4]", oRDERPNAME4);
        if (oRDERPCODE4 != null)
        localVarFormParams.put("ORDER_PCODE[4]", oRDERPCODE4);
        if (oRDERPRICE4 != null)
        localVarFormParams.put("ORDER_PRICE[4]", oRDERPRICE4);
        if (oRDERVAT4 != null)
        localVarFormParams.put("ORDER_VAT[4]", oRDERVAT4);
        if (oRDERPRICETYPE4 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[4]", oRDERPRICETYPE4);
        if (oRDERQTY4 != null)
        localVarFormParams.put("ORDER_QTY[4]", oRDERQTY4);
        if (oRDERPNAME5 != null)
        localVarFormParams.put("ORDER_PNAME[5]", oRDERPNAME5);
        if (oRDERPCODE5 != null)
        localVarFormParams.put("ORDER_PCODE[5]", oRDERPCODE5);
        if (oRDERPRICE5 != null)
        localVarFormParams.put("ORDER_PRICE[5]", oRDERPRICE5);
        if (oRDERVAT5 != null)
        localVarFormParams.put("ORDER_VAT[5]", oRDERVAT5);
        if (oRDERPRICETYPE5 != null)
        localVarFormParams.put("ORDER_PRICE_TYPE[5]", oRDERPRICETYPE5);
        if (oRDERQTY5 != null)
        localVarFormParams.put("ORDER_QTY[5]", oRDERQTY5);

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new order via ALU v3
     * 
     * @param MERCHANT The Merchant&#39;s ID, available in Control Panel  (Account Management / Account Settings)  (required)
     * @param ORDER_REF Order external reference number in Merchant&#39;s system  (required)
     * @param ORDER_DATE The date when the order is initiated in the system,  in YYYY-MM-DD HH:MM:SS format (e.g.: \&quot;2012-05-01 21:15:45\&quot;) Important: Date should be UTC standard +/-10 minutes  (required)
     * @param PAY_METHOD Payment method for the order. Possible values: CCVISAMC -  Visa/Mastercard credit card (default), WIRE, UPT, BKM, QIWI,  PAYU_CREDIT, QBANK, COMPAY, TINKOFF_LOAN  (optional, default to CCVISAMC)
     * @param BACK_REF Return URL on the Merchant webshop side that will be used in case  of 3DS enrolled cards authorizations or for Pay By Link (PBL)  payment methods (such as BKM, QIWI, PayU Credit, QBank, Compay, Tinkoff Loan).              (optional)
     * @param ORDER_HASH HMAC_MD5 signature applied on all parameters from the request. Source string for HMAC_MD5 will be calculated by adding  the length of each field value at the beginning of field value.   A common key shared between PayU and the merchant is used  for the signature. Find more details on how is HASH generated here.  (optional)
     * @param BILL_LNAME Shopper&#39;s last name  (required)
     * @param BILL_FNAME Shopper&#39;s first name  (required)
     * @param BILL_EMAIL Email address of the Shopper (required)
     * @param BILL_PHONE Shopper&#39;s phone number  (required)
     * @param BILL_COUNTRYCODE Shopper&#39;s country code in two letters, ISO format  (required)
     * @param BILL_CITYPE Shopper&#39;s ID type - mandatory for UPT. Accepted values:  * PERSONALID (identity card),  * PASSPORT (passport),  * DRVLICENSE (driving license)  (required)
     * @param BILL_CINUMBER Shopper&#39;s ID number (for the specified ID type)    (required)
     * @param CC_NUMBER The card number on which the order authorization will be made.  (optional)
     * @param EXP_MONTH The month in which the card used expires  (optional)
     * @param EXP_YEAR The year in which the card used expires  (optional)
     * @param CC_CVV The CCV/CVV2 code for the card. For some card types or based on merchant settings  this can be empty, otherwise it should have a numerical value.  (optional)
     * @param CC_OWNER The card owner name, as it appears on the card.  (optional)
     * @param CC_TOKEN The token provided by Modal Checkout.  (optional)
     * @param oRDERPINFO0 First item in the so-called array of additional product info (optional)
     * @param oRDERVER0 First item in the so-called array of product version for all ordered products (optional)
     * @param SELECTED_INSTALLMENTS_NUMBER The number of installments. It can be an integer between 1 and 12.  (optional)
     * @param CARD_PROGRAM_NAME The name of card program that allows paying an order using installments.  (optional)
     * @param ORDER_TIMEOUT The time in seconds after which the order will expire.  (optional)
     * @param USE_LOYALTY_POINTS A string with value YES. The order will be paid using loyalty points.  It can be used for one time payments and (only when the LOYALTY_POINTS_AMOUNT  parameter is set and smaller than order total amount) also for installments payments.  (optional)
     * @param LOYALTY_POINTS_AMOUNT A positive number indicating the money amount worth of loyalty points to be used  for payment. It can be used only together with USE_LOYALTY_POINTS parameter (set to YES).  (optional)
     * @param CAMPAIGN_TYPE A predefined string value indicating the type of campaign to be used. It can only have  one of the following values: EXTRA_INSTALLMENTS or DELAY_INSTALLMENTS.  For bank terminals supporting both campaign types used at the same time, you can set b oth comma separated values, e.g: EXTRA_INSTALLMENTS,DELAY_INSTALLMENTS.   Must be used only with installments transactions (the SELECTED_INSTALLMENTS_NUMBER parameter  must be greater than or equal to 2).  (optional)
     * @param ORDER_SHIPPING A positive number indicating the price of shipping.  The currency is set by PRICES_CURRENCY.  (optional)
     * @param POS_CODE Optional field used to define orders made through a specific POS.  Sent value should be previously confirmed with operation team.  (optional)
     * @param BILL_FAX Shopper&#39;s fax number.  (optional)
     * @param BILL_ADDRESS Shopper&#39;s address.  (required)
     * @param bILLADDRESS2 Shopper&#39;s address (second line).  (optional)
     * @param BILL_ZIPCODE Address zip code.  (required)
     * @param BILL_CITY City.  (required)
     * @param BILL_STATE State / Dept.  (optional)
     * @param DELIVERY_LNAME Last name of the person where the order will be delivered  (required)
     * @param DELIVERY_FNAME First name of the person where the order will be delivered  (required)
     * @param DELIVERY_EMAIL Email address of the person or company where the order will be delivered  (optional)
     * @param DELIVERY_PHONE The phone of the person of company where the order will be delivered.  (required)
     * @param DELIVERY_COMPANY Company name where the order will be delivered.  (optional)
     * @param DELIVERY_ADDRESS Order delivery address.  (required)
     * @param dELIVERYADDRESS2 More details on order delivery address.  (optional)
     * @param DELIVERY_ZIPCODE Order delivery address zip code.  (required)
     * @param DELIVERY_CITY Order delivery city.  (required)
     * @param DELIVERY_STATE Order delivery state.  (required)
     * @param DELIVERY_COUNTRYCODE Delivery country code in two letters ISO format.  (required)
     * @param LU_ENABLE_TOKEN Enable Token payments for the order. For the initial transaction, we have this parameter set to 1  (optional)
     * @param LU_TOKEN_TYPE The type of the token. For the initial transaction, we have this parameter set to PAY_BY_CLICK  (optional)
     * @param CC_NUMBER_TIME Time spent by user to insert card number  (optional)
     * @param CC_OWNER_TIME Time spent by user to insert card owner  (optional)
     * @param CLIENT_IP IP address of the Shopper  (optional)
     * @param CLIENT_TIME Time collected from the Shopper&#39;s browser in YYYY-MM-DD hh:mm;ss format  (optional)
     * @param oRDERPNAME0 Product name (required)
     * @param oRDERPCODE0 Product code. If multiple products are sent (in the same or subsequent transactions) with the same product code, PayU will update the product with  the corresponding ORDER_PCODE[] (overwriting all the other product information - name, price, taxes).  (required)
     * @param oRDERPRICE0 Unit price for product. Default currency is set by PRICES_CURRENCY, described below. (required)
     * @param oRDERVAT0 VAT value for product (optional)
     * @param oRDERPRICETYPE0 Specify if ORDER_PRICE[0] parameter includes VAT or not.  * GROSS (VAT is included)  * NET (VAT will be added by PayU)  (optional, default to NET)
     * @param oRDERQTY0 Product quantity (required)
     * @param PRICES_CURRENCY The currency in which the prices are expressed, for example TRY If the parameter is not specified, the default value is the default currency of the Merchant.  (optional)
     * @param oRDERPNAME1 Product #2  (optional)
     * @param oRDERPCODE1 Product #2  (optional)
     * @param oRDERPRICE1 Product #2  (optional)
     * @param oRDERVAT1 Product #2  (optional)
     * @param oRDERPRICETYPE1 Product #2  (optional, default to NET)
     * @param oRDERQTY1 Product #2  (optional)
     * @param oRDERPNAME2 Product #3  (optional)
     * @param oRDERPCODE2 Product #3  (optional)
     * @param oRDERPRICE2 Product #3  (optional)
     * @param oRDERVAT2 Product #3  (optional)
     * @param oRDERPRICETYPE2 Product #3  (optional, default to NET)
     * @param oRDERQTY2 Product #3  (optional)
     * @param oRDERPNAME3 Product #4  (optional)
     * @param oRDERPCODE3 Product #4  (optional)
     * @param oRDERPRICE3 Product #4  (optional)
     * @param oRDERVAT3 Product #4  (optional)
     * @param oRDERPRICETYPE3 Product #4  (optional, default to NET)
     * @param oRDERQTY3 Product #4  (optional)
     * @param oRDERPNAME4 Product #5  (optional)
     * @param oRDERPCODE4 Product #5  (optional)
     * @param oRDERPRICE4 Product #5  (optional)
     * @param oRDERVAT4 Product #5  (optional)
     * @param oRDERPRICETYPE4 Product #5  (optional, default to NET)
     * @param oRDERQTY4 Product #5  (optional)
     * @param oRDERPNAME5 Product #6  (optional)
     * @param oRDERPCODE5 Product #6  (optional)
     * @param oRDERPRICE5 Product #6  (optional)
     * @param oRDERVAT5 Product #6  (optional)
     * @param oRDERPRICETYPE5 Product #6  (optional, default to NET)
     * @param oRDERQTY5 Product #6  (optional)
     * @return AluResponseRaw
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AluResponseRaw createOrder(String MERCHANT, String ORDER_REF, OffsetDateTime ORDER_DATE, String PAY_METHOD, String BACK_REF, String ORDER_HASH, String BILL_LNAME, String BILL_FNAME, String BILL_EMAIL, String BILL_PHONE, String BILL_COUNTRYCODE, String BILL_CITYPE, String BILL_CINUMBER, String CC_NUMBER, String EXP_MONTH, String EXP_YEAR, String CC_CVV, String CC_OWNER, String CC_TOKEN, String oRDERPINFO0, String oRDERVER0, BigDecimal SELECTED_INSTALLMENTS_NUMBER, String CARD_PROGRAM_NAME, String ORDER_TIMEOUT, String USE_LOYALTY_POINTS, String LOYALTY_POINTS_AMOUNT, String CAMPAIGN_TYPE, String ORDER_SHIPPING, String POS_CODE, String BILL_FAX, String BILL_ADDRESS, String bILLADDRESS2, String BILL_ZIPCODE, String BILL_CITY, String BILL_STATE, String DELIVERY_LNAME, String DELIVERY_FNAME, String DELIVERY_EMAIL, String DELIVERY_PHONE, String DELIVERY_COMPANY, String DELIVERY_ADDRESS, String dELIVERYADDRESS2, String DELIVERY_ZIPCODE, String DELIVERY_CITY, String DELIVERY_STATE, String DELIVERY_COUNTRYCODE, String LU_ENABLE_TOKEN, String LU_TOKEN_TYPE, String CC_NUMBER_TIME, String CC_OWNER_TIME, String CLIENT_IP, String CLIENT_TIME, String oRDERPNAME0, String oRDERPCODE0, BigDecimal oRDERPRICE0, BigDecimal oRDERVAT0, String oRDERPRICETYPE0, Integer oRDERQTY0, String PRICES_CURRENCY, String oRDERPNAME1, String oRDERPCODE1, BigDecimal oRDERPRICE1, BigDecimal oRDERVAT1, String oRDERPRICETYPE1, Integer oRDERQTY1, String oRDERPNAME2, String oRDERPCODE2, BigDecimal oRDERPRICE2, BigDecimal oRDERVAT2, String oRDERPRICETYPE2, Integer oRDERQTY2, String oRDERPNAME3, String oRDERPCODE3, BigDecimal oRDERPRICE3, BigDecimal oRDERVAT3, String oRDERPRICETYPE3, Integer oRDERQTY3, String oRDERPNAME4, String oRDERPCODE4, BigDecimal oRDERPRICE4, BigDecimal oRDERVAT4, String oRDERPRICETYPE4, Integer oRDERQTY4, String oRDERPNAME5, String oRDERPCODE5, BigDecimal oRDERPRICE5, BigDecimal oRDERVAT5, String oRDERPRICETYPE5, Integer oRDERQTY5) throws ApiException {
        ApiResponse<AluResponseRaw> resp = createOrderWithHttpInfo(MERCHANT, ORDER_REF, ORDER_DATE, PAY_METHOD, BACK_REF, ORDER_HASH, BILL_LNAME, BILL_FNAME, BILL_EMAIL, BILL_PHONE, BILL_COUNTRYCODE, BILL_CITYPE, BILL_CINUMBER, CC_NUMBER, EXP_MONTH, EXP_YEAR, CC_CVV, CC_OWNER, CC_TOKEN, oRDERPINFO0, oRDERVER0, SELECTED_INSTALLMENTS_NUMBER, CARD_PROGRAM_NAME, ORDER_TIMEOUT, USE_LOYALTY_POINTS, LOYALTY_POINTS_AMOUNT, CAMPAIGN_TYPE, ORDER_SHIPPING, POS_CODE, BILL_FAX, BILL_ADDRESS, bILLADDRESS2, BILL_ZIPCODE, BILL_CITY, BILL_STATE, DELIVERY_LNAME, DELIVERY_FNAME, DELIVERY_EMAIL, DELIVERY_PHONE, DELIVERY_COMPANY, DELIVERY_ADDRESS, dELIVERYADDRESS2, DELIVERY_ZIPCODE, DELIVERY_CITY, DELIVERY_STATE, DELIVERY_COUNTRYCODE, LU_ENABLE_TOKEN, LU_TOKEN_TYPE, CC_NUMBER_TIME, CC_OWNER_TIME, CLIENT_IP, CLIENT_TIME, oRDERPNAME0, oRDERPCODE0, oRDERPRICE0, oRDERVAT0, oRDERPRICETYPE0, oRDERQTY0, PRICES_CURRENCY, oRDERPNAME1, oRDERPCODE1, oRDERPRICE1, oRDERVAT1, oRDERPRICETYPE1, oRDERQTY1, oRDERPNAME2, oRDERPCODE2, oRDERPRICE2, oRDERVAT2, oRDERPRICETYPE2, oRDERQTY2, oRDERPNAME3, oRDERPCODE3, oRDERPRICE3, oRDERVAT3, oRDERPRICETYPE3, oRDERQTY3, oRDERPNAME4, oRDERPCODE4, oRDERPRICE4, oRDERVAT4, oRDERPRICETYPE4, oRDERQTY4, oRDERPNAME5, oRDERPCODE5, oRDERPRICE5, oRDERVAT5, oRDERPRICETYPE5, oRDERQTY5);
        return resp.getData();
    }

    /**
     * Create a new order via ALU v3
     * 
     * @param MERCHANT The Merchant&#39;s ID, available in Control Panel  (Account Management / Account Settings)  (required)
     * @param ORDER_REF Order external reference number in Merchant&#39;s system  (required)
     * @param ORDER_DATE The date when the order is initiated in the system,  in YYYY-MM-DD HH:MM:SS format (e.g.: \&quot;2012-05-01 21:15:45\&quot;) Important: Date should be UTC standard +/-10 minutes  (required)
     * @param PAY_METHOD Payment method for the order. Possible values: CCVISAMC -  Visa/Mastercard credit card (default), WIRE, UPT, BKM, QIWI,  PAYU_CREDIT, QBANK, COMPAY, TINKOFF_LOAN  (optional, default to CCVISAMC)
     * @param BACK_REF Return URL on the Merchant webshop side that will be used in case  of 3DS enrolled cards authorizations or for Pay By Link (PBL)  payment methods (such as BKM, QIWI, PayU Credit, QBank, Compay, Tinkoff Loan).              (optional)
     * @param ORDER_HASH HMAC_MD5 signature applied on all parameters from the request. Source string for HMAC_MD5 will be calculated by adding  the length of each field value at the beginning of field value.   A common key shared between PayU and the merchant is used  for the signature. Find more details on how is HASH generated here.  (optional)
     * @param BILL_LNAME Shopper&#39;s last name  (required)
     * @param BILL_FNAME Shopper&#39;s first name  (required)
     * @param BILL_EMAIL Email address of the Shopper (required)
     * @param BILL_PHONE Shopper&#39;s phone number  (required)
     * @param BILL_COUNTRYCODE Shopper&#39;s country code in two letters, ISO format  (required)
     * @param BILL_CITYPE Shopper&#39;s ID type - mandatory for UPT. Accepted values:  * PERSONALID (identity card),  * PASSPORT (passport),  * DRVLICENSE (driving license)  (required)
     * @param BILL_CINUMBER Shopper&#39;s ID number (for the specified ID type)    (required)
     * @param CC_NUMBER The card number on which the order authorization will be made.  (optional)
     * @param EXP_MONTH The month in which the card used expires  (optional)
     * @param EXP_YEAR The year in which the card used expires  (optional)
     * @param CC_CVV The CCV/CVV2 code for the card. For some card types or based on merchant settings  this can be empty, otherwise it should have a numerical value.  (optional)
     * @param CC_OWNER The card owner name, as it appears on the card.  (optional)
     * @param CC_TOKEN The token provided by Modal Checkout.  (optional)
     * @param oRDERPINFO0 First item in the so-called array of additional product info (optional)
     * @param oRDERVER0 First item in the so-called array of product version for all ordered products (optional)
     * @param SELECTED_INSTALLMENTS_NUMBER The number of installments. It can be an integer between 1 and 12.  (optional)
     * @param CARD_PROGRAM_NAME The name of card program that allows paying an order using installments.  (optional)
     * @param ORDER_TIMEOUT The time in seconds after which the order will expire.  (optional)
     * @param USE_LOYALTY_POINTS A string with value YES. The order will be paid using loyalty points.  It can be used for one time payments and (only when the LOYALTY_POINTS_AMOUNT  parameter is set and smaller than order total amount) also for installments payments.  (optional)
     * @param LOYALTY_POINTS_AMOUNT A positive number indicating the money amount worth of loyalty points to be used  for payment. It can be used only together with USE_LOYALTY_POINTS parameter (set to YES).  (optional)
     * @param CAMPAIGN_TYPE A predefined string value indicating the type of campaign to be used. It can only have  one of the following values: EXTRA_INSTALLMENTS or DELAY_INSTALLMENTS.  For bank terminals supporting both campaign types used at the same time, you can set b oth comma separated values, e.g: EXTRA_INSTALLMENTS,DELAY_INSTALLMENTS.   Must be used only with installments transactions (the SELECTED_INSTALLMENTS_NUMBER parameter  must be greater than or equal to 2).  (optional)
     * @param ORDER_SHIPPING A positive number indicating the price of shipping.  The currency is set by PRICES_CURRENCY.  (optional)
     * @param POS_CODE Optional field used to define orders made through a specific POS.  Sent value should be previously confirmed with operation team.  (optional)
     * @param BILL_FAX Shopper&#39;s fax number.  (optional)
     * @param BILL_ADDRESS Shopper&#39;s address.  (required)
     * @param bILLADDRESS2 Shopper&#39;s address (second line).  (optional)
     * @param BILL_ZIPCODE Address zip code.  (required)
     * @param BILL_CITY City.  (required)
     * @param BILL_STATE State / Dept.  (optional)
     * @param DELIVERY_LNAME Last name of the person where the order will be delivered  (required)
     * @param DELIVERY_FNAME First name of the person where the order will be delivered  (required)
     * @param DELIVERY_EMAIL Email address of the person or company where the order will be delivered  (optional)
     * @param DELIVERY_PHONE The phone of the person of company where the order will be delivered.  (required)
     * @param DELIVERY_COMPANY Company name where the order will be delivered.  (optional)
     * @param DELIVERY_ADDRESS Order delivery address.  (required)
     * @param dELIVERYADDRESS2 More details on order delivery address.  (optional)
     * @param DELIVERY_ZIPCODE Order delivery address zip code.  (required)
     * @param DELIVERY_CITY Order delivery city.  (required)
     * @param DELIVERY_STATE Order delivery state.  (required)
     * @param DELIVERY_COUNTRYCODE Delivery country code in two letters ISO format.  (required)
     * @param LU_ENABLE_TOKEN Enable Token payments for the order. For the initial transaction, we have this parameter set to 1  (optional)
     * @param LU_TOKEN_TYPE The type of the token. For the initial transaction, we have this parameter set to PAY_BY_CLICK  (optional)
     * @param CC_NUMBER_TIME Time spent by user to insert card number  (optional)
     * @param CC_OWNER_TIME Time spent by user to insert card owner  (optional)
     * @param CLIENT_IP IP address of the Shopper  (optional)
     * @param CLIENT_TIME Time collected from the Shopper&#39;s browser in YYYY-MM-DD hh:mm;ss format  (optional)
     * @param oRDERPNAME0 Product name (required)
     * @param oRDERPCODE0 Product code. If multiple products are sent (in the same or subsequent transactions) with the same product code, PayU will update the product with  the corresponding ORDER_PCODE[] (overwriting all the other product information - name, price, taxes).  (required)
     * @param oRDERPRICE0 Unit price for product. Default currency is set by PRICES_CURRENCY, described below. (required)
     * @param oRDERVAT0 VAT value for product (optional)
     * @param oRDERPRICETYPE0 Specify if ORDER_PRICE[0] parameter includes VAT or not.  * GROSS (VAT is included)  * NET (VAT will be added by PayU)  (optional, default to NET)
     * @param oRDERQTY0 Product quantity (required)
     * @param PRICES_CURRENCY The currency in which the prices are expressed, for example TRY If the parameter is not specified, the default value is the default currency of the Merchant.  (optional)
     * @param oRDERPNAME1 Product #2  (optional)
     * @param oRDERPCODE1 Product #2  (optional)
     * @param oRDERPRICE1 Product #2  (optional)
     * @param oRDERVAT1 Product #2  (optional)
     * @param oRDERPRICETYPE1 Product #2  (optional, default to NET)
     * @param oRDERQTY1 Product #2  (optional)
     * @param oRDERPNAME2 Product #3  (optional)
     * @param oRDERPCODE2 Product #3  (optional)
     * @param oRDERPRICE2 Product #3  (optional)
     * @param oRDERVAT2 Product #3  (optional)
     * @param oRDERPRICETYPE2 Product #3  (optional, default to NET)
     * @param oRDERQTY2 Product #3  (optional)
     * @param oRDERPNAME3 Product #4  (optional)
     * @param oRDERPCODE3 Product #4  (optional)
     * @param oRDERPRICE3 Product #4  (optional)
     * @param oRDERVAT3 Product #4  (optional)
     * @param oRDERPRICETYPE3 Product #4  (optional, default to NET)
     * @param oRDERQTY3 Product #4  (optional)
     * @param oRDERPNAME4 Product #5  (optional)
     * @param oRDERPCODE4 Product #5  (optional)
     * @param oRDERPRICE4 Product #5  (optional)
     * @param oRDERVAT4 Product #5  (optional)
     * @param oRDERPRICETYPE4 Product #5  (optional, default to NET)
     * @param oRDERQTY4 Product #5  (optional)
     * @param oRDERPNAME5 Product #6  (optional)
     * @param oRDERPCODE5 Product #6  (optional)
     * @param oRDERPRICE5 Product #6  (optional)
     * @param oRDERVAT5 Product #6  (optional)
     * @param oRDERPRICETYPE5 Product #6  (optional, default to NET)
     * @param oRDERQTY5 Product #6  (optional)
     * @return ApiResponse&lt;AluResponseRaw&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AluResponseRaw> createOrderWithHttpInfo(String MERCHANT, String ORDER_REF, OffsetDateTime ORDER_DATE, String PAY_METHOD, String BACK_REF, String ORDER_HASH, String BILL_LNAME, String BILL_FNAME, String BILL_EMAIL, String BILL_PHONE, String BILL_COUNTRYCODE, String BILL_CITYPE, String BILL_CINUMBER, String CC_NUMBER, String EXP_MONTH, String EXP_YEAR, String CC_CVV, String CC_OWNER, String CC_TOKEN, String oRDERPINFO0, String oRDERVER0, BigDecimal SELECTED_INSTALLMENTS_NUMBER, String CARD_PROGRAM_NAME, String ORDER_TIMEOUT, String USE_LOYALTY_POINTS, String LOYALTY_POINTS_AMOUNT, String CAMPAIGN_TYPE, String ORDER_SHIPPING, String POS_CODE, String BILL_FAX, String BILL_ADDRESS, String bILLADDRESS2, String BILL_ZIPCODE, String BILL_CITY, String BILL_STATE, String DELIVERY_LNAME, String DELIVERY_FNAME, String DELIVERY_EMAIL, String DELIVERY_PHONE, String DELIVERY_COMPANY, String DELIVERY_ADDRESS, String dELIVERYADDRESS2, String DELIVERY_ZIPCODE, String DELIVERY_CITY, String DELIVERY_STATE, String DELIVERY_COUNTRYCODE, String LU_ENABLE_TOKEN, String LU_TOKEN_TYPE, String CC_NUMBER_TIME, String CC_OWNER_TIME, String CLIENT_IP, String CLIENT_TIME, String oRDERPNAME0, String oRDERPCODE0, BigDecimal oRDERPRICE0, BigDecimal oRDERVAT0, String oRDERPRICETYPE0, Integer oRDERQTY0, String PRICES_CURRENCY, String oRDERPNAME1, String oRDERPCODE1, BigDecimal oRDERPRICE1, BigDecimal oRDERVAT1, String oRDERPRICETYPE1, Integer oRDERQTY1, String oRDERPNAME2, String oRDERPCODE2, BigDecimal oRDERPRICE2, BigDecimal oRDERVAT2, String oRDERPRICETYPE2, Integer oRDERQTY2, String oRDERPNAME3, String oRDERPCODE3, BigDecimal oRDERPRICE3, BigDecimal oRDERVAT3, String oRDERPRICETYPE3, Integer oRDERQTY3, String oRDERPNAME4, String oRDERPCODE4, BigDecimal oRDERPRICE4, BigDecimal oRDERVAT4, String oRDERPRICETYPE4, Integer oRDERQTY4, String oRDERPNAME5, String oRDERPCODE5, BigDecimal oRDERPRICE5, BigDecimal oRDERVAT5, String oRDERPRICETYPE5, Integer oRDERQTY5) throws ApiException {
        com.squareup.okhttp.Call call = createOrderCall(MERCHANT, ORDER_REF, ORDER_DATE, PAY_METHOD, BACK_REF, ORDER_HASH, BILL_LNAME, BILL_FNAME, BILL_EMAIL, BILL_PHONE, BILL_COUNTRYCODE, BILL_CITYPE, BILL_CINUMBER, CC_NUMBER, EXP_MONTH, EXP_YEAR, CC_CVV, CC_OWNER, CC_TOKEN, oRDERPINFO0, oRDERVER0, SELECTED_INSTALLMENTS_NUMBER, CARD_PROGRAM_NAME, ORDER_TIMEOUT, USE_LOYALTY_POINTS, LOYALTY_POINTS_AMOUNT, CAMPAIGN_TYPE, ORDER_SHIPPING, POS_CODE, BILL_FAX, BILL_ADDRESS, bILLADDRESS2, BILL_ZIPCODE, BILL_CITY, BILL_STATE, DELIVERY_LNAME, DELIVERY_FNAME, DELIVERY_EMAIL, DELIVERY_PHONE, DELIVERY_COMPANY, DELIVERY_ADDRESS, dELIVERYADDRESS2, DELIVERY_ZIPCODE, DELIVERY_CITY, DELIVERY_STATE, DELIVERY_COUNTRYCODE, LU_ENABLE_TOKEN, LU_TOKEN_TYPE, CC_NUMBER_TIME, CC_OWNER_TIME, CLIENT_IP, CLIENT_TIME, oRDERPNAME0, oRDERPCODE0, oRDERPRICE0, oRDERVAT0, oRDERPRICETYPE0, oRDERQTY0, PRICES_CURRENCY, oRDERPNAME1, oRDERPCODE1, oRDERPRICE1, oRDERVAT1, oRDERPRICETYPE1, oRDERQTY1, oRDERPNAME2, oRDERPCODE2, oRDERPRICE2, oRDERVAT2, oRDERPRICETYPE2, oRDERQTY2, oRDERPNAME3, oRDERPCODE3, oRDERPRICE3, oRDERVAT3, oRDERPRICETYPE3, oRDERQTY3, oRDERPNAME4, oRDERPCODE4, oRDERPRICE4, oRDERVAT4, oRDERPRICETYPE4, oRDERQTY4, oRDERPNAME5, oRDERPCODE5, oRDERPRICE5, oRDERVAT5, oRDERPRICETYPE5, oRDERQTY5, null, null);
        Type localVarReturnType = new TypeToken<AluResponseRaw>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new order via ALU v3 (asynchronously)
     * 
     * @param MERCHANT The Merchant&#39;s ID, available in Control Panel  (Account Management / Account Settings)  (required)
     * @param ORDER_REF Order external reference number in Merchant&#39;s system  (required)
     * @param ORDER_DATE The date when the order is initiated in the system,  in YYYY-MM-DD HH:MM:SS format (e.g.: \&quot;2012-05-01 21:15:45\&quot;) Important: Date should be UTC standard +/-10 minutes  (required)
     * @param PAY_METHOD Payment method for the order. Possible values: CCVISAMC -  Visa/Mastercard credit card (default), WIRE, UPT, BKM, QIWI,  PAYU_CREDIT, QBANK, COMPAY, TINKOFF_LOAN  (optional, default to CCVISAMC)
     * @param BACK_REF Return URL on the Merchant webshop side that will be used in case  of 3DS enrolled cards authorizations or for Pay By Link (PBL)  payment methods (such as BKM, QIWI, PayU Credit, QBank, Compay, Tinkoff Loan).              (optional)
     * @param ORDER_HASH HMAC_MD5 signature applied on all parameters from the request. Source string for HMAC_MD5 will be calculated by adding  the length of each field value at the beginning of field value.   A common key shared between PayU and the merchant is used  for the signature. Find more details on how is HASH generated here.  (optional)
     * @param BILL_LNAME Shopper&#39;s last name  (required)
     * @param BILL_FNAME Shopper&#39;s first name  (required)
     * @param BILL_EMAIL Email address of the Shopper (required)
     * @param BILL_PHONE Shopper&#39;s phone number  (required)
     * @param BILL_COUNTRYCODE Shopper&#39;s country code in two letters, ISO format  (required)
     * @param BILL_CITYPE Shopper&#39;s ID type - mandatory for UPT. Accepted values:  * PERSONALID (identity card),  * PASSPORT (passport),  * DRVLICENSE (driving license)  (required)
     * @param BILL_CINUMBER Shopper&#39;s ID number (for the specified ID type)    (required)
     * @param CC_NUMBER The card number on which the order authorization will be made.  (optional)
     * @param EXP_MONTH The month in which the card used expires  (optional)
     * @param EXP_YEAR The year in which the card used expires  (optional)
     * @param CC_CVV The CCV/CVV2 code for the card. For some card types or based on merchant settings  this can be empty, otherwise it should have a numerical value.  (optional)
     * @param CC_OWNER The card owner name, as it appears on the card.  (optional)
     * @param CC_TOKEN The token provided by Modal Checkout.  (optional)
     * @param oRDERPINFO0 First item in the so-called array of additional product info (optional)
     * @param oRDERVER0 First item in the so-called array of product version for all ordered products (optional)
     * @param SELECTED_INSTALLMENTS_NUMBER The number of installments. It can be an integer between 1 and 12.  (optional)
     * @param CARD_PROGRAM_NAME The name of card program that allows paying an order using installments.  (optional)
     * @param ORDER_TIMEOUT The time in seconds after which the order will expire.  (optional)
     * @param USE_LOYALTY_POINTS A string with value YES. The order will be paid using loyalty points.  It can be used for one time payments and (only when the LOYALTY_POINTS_AMOUNT  parameter is set and smaller than order total amount) also for installments payments.  (optional)
     * @param LOYALTY_POINTS_AMOUNT A positive number indicating the money amount worth of loyalty points to be used  for payment. It can be used only together with USE_LOYALTY_POINTS parameter (set to YES).  (optional)
     * @param CAMPAIGN_TYPE A predefined string value indicating the type of campaign to be used. It can only have  one of the following values: EXTRA_INSTALLMENTS or DELAY_INSTALLMENTS.  For bank terminals supporting both campaign types used at the same time, you can set b oth comma separated values, e.g: EXTRA_INSTALLMENTS,DELAY_INSTALLMENTS.   Must be used only with installments transactions (the SELECTED_INSTALLMENTS_NUMBER parameter  must be greater than or equal to 2).  (optional)
     * @param ORDER_SHIPPING A positive number indicating the price of shipping.  The currency is set by PRICES_CURRENCY.  (optional)
     * @param POS_CODE Optional field used to define orders made through a specific POS.  Sent value should be previously confirmed with operation team.  (optional)
     * @param BILL_FAX Shopper&#39;s fax number.  (optional)
     * @param BILL_ADDRESS Shopper&#39;s address.  (required)
     * @param bILLADDRESS2 Shopper&#39;s address (second line).  (optional)
     * @param BILL_ZIPCODE Address zip code.  (required)
     * @param BILL_CITY City.  (required)
     * @param BILL_STATE State / Dept.  (optional)
     * @param DELIVERY_LNAME Last name of the person where the order will be delivered  (required)
     * @param DELIVERY_FNAME First name of the person where the order will be delivered  (required)
     * @param DELIVERY_EMAIL Email address of the person or company where the order will be delivered  (optional)
     * @param DELIVERY_PHONE The phone of the person of company where the order will be delivered.  (required)
     * @param DELIVERY_COMPANY Company name where the order will be delivered.  (optional)
     * @param DELIVERY_ADDRESS Order delivery address.  (required)
     * @param dELIVERYADDRESS2 More details on order delivery address.  (optional)
     * @param DELIVERY_ZIPCODE Order delivery address zip code.  (required)
     * @param DELIVERY_CITY Order delivery city.  (required)
     * @param DELIVERY_STATE Order delivery state.  (required)
     * @param DELIVERY_COUNTRYCODE Delivery country code in two letters ISO format.  (required)
     * @param LU_ENABLE_TOKEN Enable Token payments for the order. For the initial transaction, we have this parameter set to 1  (optional)
     * @param LU_TOKEN_TYPE The type of the token. For the initial transaction, we have this parameter set to PAY_BY_CLICK  (optional)
     * @param CC_NUMBER_TIME Time spent by user to insert card number  (optional)
     * @param CC_OWNER_TIME Time spent by user to insert card owner  (optional)
     * @param CLIENT_IP IP address of the Shopper  (optional)
     * @param CLIENT_TIME Time collected from the Shopper&#39;s browser in YYYY-MM-DD hh:mm;ss format  (optional)
     * @param oRDERPNAME0 Product name (required)
     * @param oRDERPCODE0 Product code. If multiple products are sent (in the same or subsequent transactions) with the same product code, PayU will update the product with  the corresponding ORDER_PCODE[] (overwriting all the other product information - name, price, taxes).  (required)
     * @param oRDERPRICE0 Unit price for product. Default currency is set by PRICES_CURRENCY, described below. (required)
     * @param oRDERVAT0 VAT value for product (optional)
     * @param oRDERPRICETYPE0 Specify if ORDER_PRICE[0] parameter includes VAT or not.  * GROSS (VAT is included)  * NET (VAT will be added by PayU)  (optional, default to NET)
     * @param oRDERQTY0 Product quantity (required)
     * @param PRICES_CURRENCY The currency in which the prices are expressed, for example TRY If the parameter is not specified, the default value is the default currency of the Merchant.  (optional)
     * @param oRDERPNAME1 Product #2  (optional)
     * @param oRDERPCODE1 Product #2  (optional)
     * @param oRDERPRICE1 Product #2  (optional)
     * @param oRDERVAT1 Product #2  (optional)
     * @param oRDERPRICETYPE1 Product #2  (optional, default to NET)
     * @param oRDERQTY1 Product #2  (optional)
     * @param oRDERPNAME2 Product #3  (optional)
     * @param oRDERPCODE2 Product #3  (optional)
     * @param oRDERPRICE2 Product #3  (optional)
     * @param oRDERVAT2 Product #3  (optional)
     * @param oRDERPRICETYPE2 Product #3  (optional, default to NET)
     * @param oRDERQTY2 Product #3  (optional)
     * @param oRDERPNAME3 Product #4  (optional)
     * @param oRDERPCODE3 Product #4  (optional)
     * @param oRDERPRICE3 Product #4  (optional)
     * @param oRDERVAT3 Product #4  (optional)
     * @param oRDERPRICETYPE3 Product #4  (optional, default to NET)
     * @param oRDERQTY3 Product #4  (optional)
     * @param oRDERPNAME4 Product #5  (optional)
     * @param oRDERPCODE4 Product #5  (optional)
     * @param oRDERPRICE4 Product #5  (optional)
     * @param oRDERVAT4 Product #5  (optional)
     * @param oRDERPRICETYPE4 Product #5  (optional, default to NET)
     * @param oRDERQTY4 Product #5  (optional)
     * @param oRDERPNAME5 Product #6  (optional)
     * @param oRDERPCODE5 Product #6  (optional)
     * @param oRDERPRICE5 Product #6  (optional)
     * @param oRDERVAT5 Product #6  (optional)
     * @param oRDERPRICETYPE5 Product #6  (optional, default to NET)
     * @param oRDERQTY5 Product #6  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrderAsync(String MERCHANT, String ORDER_REF, OffsetDateTime ORDER_DATE, String PAY_METHOD, String BACK_REF, String ORDER_HASH, String BILL_LNAME, String BILL_FNAME, String BILL_EMAIL, String BILL_PHONE, String BILL_COUNTRYCODE, String BILL_CITYPE, String BILL_CINUMBER, String CC_NUMBER, String EXP_MONTH, String EXP_YEAR, String CC_CVV, String CC_OWNER, String CC_TOKEN, String oRDERPINFO0, String oRDERVER0, BigDecimal SELECTED_INSTALLMENTS_NUMBER, String CARD_PROGRAM_NAME, String ORDER_TIMEOUT, String USE_LOYALTY_POINTS, String LOYALTY_POINTS_AMOUNT, String CAMPAIGN_TYPE, String ORDER_SHIPPING, String POS_CODE, String BILL_FAX, String BILL_ADDRESS, String bILLADDRESS2, String BILL_ZIPCODE, String BILL_CITY, String BILL_STATE, String DELIVERY_LNAME, String DELIVERY_FNAME, String DELIVERY_EMAIL, String DELIVERY_PHONE, String DELIVERY_COMPANY, String DELIVERY_ADDRESS, String dELIVERYADDRESS2, String DELIVERY_ZIPCODE, String DELIVERY_CITY, String DELIVERY_STATE, String DELIVERY_COUNTRYCODE, String LU_ENABLE_TOKEN, String LU_TOKEN_TYPE, String CC_NUMBER_TIME, String CC_OWNER_TIME, String CLIENT_IP, String CLIENT_TIME, String oRDERPNAME0, String oRDERPCODE0, BigDecimal oRDERPRICE0, BigDecimal oRDERVAT0, String oRDERPRICETYPE0, Integer oRDERQTY0, String PRICES_CURRENCY, String oRDERPNAME1, String oRDERPCODE1, BigDecimal oRDERPRICE1, BigDecimal oRDERVAT1, String oRDERPRICETYPE1, Integer oRDERQTY1, String oRDERPNAME2, String oRDERPCODE2, BigDecimal oRDERPRICE2, BigDecimal oRDERVAT2, String oRDERPRICETYPE2, Integer oRDERQTY2, String oRDERPNAME3, String oRDERPCODE3, BigDecimal oRDERPRICE3, BigDecimal oRDERVAT3, String oRDERPRICETYPE3, Integer oRDERQTY3, String oRDERPNAME4, String oRDERPCODE4, BigDecimal oRDERPRICE4, BigDecimal oRDERVAT4, String oRDERPRICETYPE4, Integer oRDERQTY4, String oRDERPNAME5, String oRDERPCODE5, BigDecimal oRDERPRICE5, BigDecimal oRDERVAT5, String oRDERPRICETYPE5, Integer oRDERQTY5, final ApiCallback<AluResponseRaw> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrderCall(MERCHANT, ORDER_REF, ORDER_DATE, PAY_METHOD, BACK_REF, ORDER_HASH, BILL_LNAME, BILL_FNAME, BILL_EMAIL, BILL_PHONE, BILL_COUNTRYCODE, BILL_CITYPE, BILL_CINUMBER, CC_NUMBER, EXP_MONTH, EXP_YEAR, CC_CVV, CC_OWNER, CC_TOKEN, oRDERPINFO0, oRDERVER0, SELECTED_INSTALLMENTS_NUMBER, CARD_PROGRAM_NAME, ORDER_TIMEOUT, USE_LOYALTY_POINTS, LOYALTY_POINTS_AMOUNT, CAMPAIGN_TYPE, ORDER_SHIPPING, POS_CODE, BILL_FAX, BILL_ADDRESS, bILLADDRESS2, BILL_ZIPCODE, BILL_CITY, BILL_STATE, DELIVERY_LNAME, DELIVERY_FNAME, DELIVERY_EMAIL, DELIVERY_PHONE, DELIVERY_COMPANY, DELIVERY_ADDRESS, dELIVERYADDRESS2, DELIVERY_ZIPCODE, DELIVERY_CITY, DELIVERY_STATE, DELIVERY_COUNTRYCODE, LU_ENABLE_TOKEN, LU_TOKEN_TYPE, CC_NUMBER_TIME, CC_OWNER_TIME, CLIENT_IP, CLIENT_TIME, oRDERPNAME0, oRDERPCODE0, oRDERPRICE0, oRDERVAT0, oRDERPRICETYPE0, oRDERQTY0, PRICES_CURRENCY, oRDERPNAME1, oRDERPCODE1, oRDERPRICE1, oRDERVAT1, oRDERPRICETYPE1, oRDERQTY1, oRDERPNAME2, oRDERPCODE2, oRDERPRICE2, oRDERVAT2, oRDERPRICETYPE2, oRDERQTY2, oRDERPNAME3, oRDERPCODE3, oRDERPRICE3, oRDERVAT3, oRDERPRICETYPE3, oRDERQTY3, oRDERPNAME4, oRDERPCODE4, oRDERPRICE4, oRDERVAT4, oRDERPRICETYPE4, oRDERQTY4, oRDERPNAME5, oRDERPCODE5, oRDERPRICE5, oRDERVAT5, oRDERPRICETYPE5, oRDERQTY5, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AluResponseRaw>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
